plugins {
    id 'java'
    id 'org.springframework.boot' version "${springStarter}"
    id 'io.spring.dependency-management' version "${dependencyManagement}"
    id 'org.liquibase.gradle' version "${liquibasePluginVersion}"
}

group 'ru.home.crypto'
version '1.0.0'

sourceCompatibility = '17'
targetCompatibility = '17'

repositories {
    mavenCentral()
    maven { url 'https://jitpack.io' }
}

configurations {
    all*.exclude module : 'spring-boot-starter-logging'
}

springBoot {
    mainClass = 'ru.home.crypto.CryptoExchangeApplication'
}

bootJar {
    archiveBaseName = 'CryptoExchangeApplication'
    archiveVersion = '1.0.0'
}

dependencies {
    //spring
    implementation "org.springframework.boot:spring-boot-devtools:${springDevtools}"
    implementation "org.springframework.boot:spring-boot-starter:${springStarter}"
    implementation "org.springframework.boot:spring-boot-starter-web:${springStarter}"
    implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootStarterActuator}"
    implementation "org.springframework.boot:spring-boot-starter-log4j2:${springStarter}"
    implementation "org.telegram:telegrambots-spring-boot-starter:${telegrambotsSpring}"
    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springStarter}"
    implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springDataJpa}"
    testImplementation "org.springframework.boot:spring-boot-starter-test:${springStarterTest}"
    implementation 'jakarta.persistence:jakarta.persistence-api:3.1.0'

    //lombok
    annotationProcessor "org.projectlombok:lombok:${lombok}"
    compileOnly "org.projectlombok:lombok:${lombok}"

    //bd
    implementation "org.postgresql:postgresql:${postgresql}"
    implementation "org.liquibase:liquibase-core:${liquibaseVersion}"

    //mapStruct
    annotationProcessor "org.mapstruct:mapstruct-processor:${mapStruct}"
    implementation "org.mapstruct:mapstruct:${mapStruct}"

    //for create jwt token
    implementation "io.jsonwebtoken:jjwt-api:${jjwt}"
    runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwt}"
    runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwt}"

    testImplementation "org.junit.jupiter:junit-jupiter-api:${junitJupiter}"
    implementation "io.micrometer:micrometer-registry-prometheus:${micrometerRegistryPrometheus}"
    implementation 'com.github.philipinho:CoinGecko-Java:-SNAPSHOT'
}

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}